#!/usr/bin/env python

import argparse
try:
	import configparser
except:
	import ConfigParser as configparser
import json
import os
import sevrest
import sys

CONFIG_FILE = os.path.join(os.path.expanduser('~'), 'sevrest.conf')

command_map = {
	"auth" : {
		"login" : "auth"
	},
	"plugin" : {
		"get" : "get_plugins"
	},
	"objecttype" : {
		"get" : "get_objecttypes"
	}
}

config = configparser.ConfigParser()
try:
	config.read(CONFIG_FILE)
except:
	pass
if('sevone' not in config.sections()):
	config.add_section('sevone')
if(not config.has_option('sevone', 'host')):
	config.set('sevone', 'host', None)
if(not config.has_option('sevone', 'token')):
	config.set('sevone', 'token', '')

cmdline = argparse.ArgumentParser()
cmdline.add_argument("--token", action = "store", default = config.get('sevone', 'token'), help = "Auth token (as returned by 'auth login' or generated via the SevOne GUI")
cmdline.add_argument("--host", action = "store", default = config.get('sevone', 'host'), help = "Host (and port, if needed) to reach the SevOne REST API")
cmdline.add_argument("--filter", "-f", action = "store", default = "", help = "A JSON filter to pass to REST API getters")
cmdline.add_argument("object", action = "store", help = "Type of object to act upon, e.g. 'plugin' or 'auth'")
cmdline.add_argument("action", action = "store", help = "Action to take, e.g. 'login' or 'get'")
cmdline.add_argument("args", action = "store", nargs = argparse.REMAINDER, help = "Arguments to pass to API call")
args = cmdline.parse_args()

if(args.object not in command_map):
	print('!!! Object type "%s" does not exist; valid objects are %s' % (args.object, command_map.keys()))
	sys.exit(1)

actions = command_map[args.object]
if(args.action not in actions):
	print('!!! Action "%s" does not exist for object type "%s"; valid actions are %s' % (args.action, args.object, actions.keys()))
	sys.exit(1)

func = actions[args.action]
try:
	sieve = json.loads(args.filter)
except:
	sieve = None

client = sevrest.SevOne('http://' + args.host + '/api/v1', token = args.token)
result = getattr(client, func)(sieve, *args.args)
print(json.dumps(result, indent = 4))

if(func == 'auth'):
	with open(CONFIG_FILE, 'w') as f:
		config.set('sevone', 'host', args.host)
		config.set('sevone', 'token', result['token'])
		config.write(f)

